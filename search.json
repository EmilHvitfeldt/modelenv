[{"path":"https://emilhvitfeldt.github.io/modelenv/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 modelenv authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Hvitfeldt. Author, maintainer.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hvitfeldt E (2022). modelenv: Provide Tools Register Models use 'tidymodels'. https://github.com/EmilHvitfeldt/modelenv, https://emilhvitfeldt.github.io/modelenv/.","code":"@Manual{,   title = {modelenv: Provide Tools to Register Models for use in 'tidymodels'},   author = {Emil Hvitfeldt},   year = {2022},   note = {https://github.com/EmilHvitfeldt/modelenv, https://emilhvitfeldt.github.io/modelenv/}, }"},{"path":"https://emilhvitfeldt.github.io/modelenv/index.html","id":"modelenv","dir":"","previous_headings":"","what":"Provide Tools to Register Models for use in tidymodels","title":"Provide Tools to Register Models for use in tidymodels","text":"modelenv developer focused package designed provide tools register models much done parsnip. package replace parsnip’s registration functions, used tidyclust future non-parsnip modeling packages avoid complex dependencies.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Provide Tools to Register Models for use in tidymodels","text":"can install released version modelenv CRAN : development version GitHub :","code":"install.packages(\"modelenv\") # install.packages(\"remotes\") remotes::install_github(\"tidymodels/modelenv\")"},{"path":"https://emilhvitfeldt.github.io/modelenv/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Provide Tools to Register Models for use in tidymodels","text":"functions near identical interfaces parsnip equivalent, see tidymodels.org - build parsnip model instructions use functions.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/get_model_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with the modelenv model environment — get_model_env","title":"Working with the modelenv model environment — get_model_env","text":"functions read write environment package stores information model specifications.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/get_model_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Working with the modelenv model environment — get_model_env","text":"","code":"get_model_env()  get_from_env(items)  set_env_val(name, value)"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/get_model_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Working with the modelenv model environment — get_model_env","text":"items character string objects model environment. name single character value new symbol model environment. value single value new value model environment.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/get_model_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with the modelenv model environment — get_model_env","text":"","code":"if (FALSE) { # Access the model data: current_code <- get_model_env() ls(envir = current_code)  get_from_env(\"models\") get_from_env(\"modes\")  get_from_env(\"example\") set_env_val(\"example\", 4) get_from_env(\"example\") }"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_dependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Dependency for Model — set_dependency","title":"Register Dependency for Model — set_dependency","text":"function used register mode model, engine, mode combination.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_dependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Dependency for Model — set_dependency","text":"","code":"set_dependency(model, mode, eng, pkg)  get_dependency(model)"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_dependency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register Dependency for Model — set_dependency","text":"model single character string model type (e.g. \"k_means\", etc). mode single character string model mode (e.g. \"partition\"). eng single character string model engine. pkg options character string package name.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_dependency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Dependency for Model — set_dependency","text":"function package needs added dependency. mode needs set explicitly, dependencies needs specified model, mode eng combination.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_dependency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Dependency for Model — set_dependency","text":"","code":"if (FALSE) { set_new_model(\"shallow_learning_model\") set_model_mode(\"shallow_learning_model\", \"partition\") set_model_engine(\"shallow_learning_model\", \"partition\", \"stats\")  set_dependency(\"shallow_learning_model\", \"partition\", \"stats\", \"base\") get_dependency(\"shallow_learning_model\") get_dependency(\"shallow_learning_model\")$pkg  set_dependency(\"shallow_learning_model\", \"partition\", \"stats\", \"stats\") get_dependency(\"shallow_learning_model\") get_dependency(\"shallow_learning_model\")$pkg  # Only unique packages are kept set_dependency(\"shallow_learning_model\", \"partition\", \"stats\", \"stats\") get_dependency(\"shallow_learning_model\") get_dependency(\"shallow_learning_model\")$pkg }"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_encoding.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Encoding Options for Model — set_encoding","title":"Register Encoding Options for Model — set_encoding","text":"function used register encoding information model, engine, mode combination.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_encoding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Encoding Options for Model — set_encoding","text":"","code":"set_encoding(model, mode, eng, options)  get_encoding(model)"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_encoding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register Encoding Options for Model — set_encoding","text":"model single character string model type (e.g. \"k_means\", etc). mode single character string model mode (e.g. \"partition\"). eng single character string model engine. options list options engine-specific preprocessing encodings. See Details .","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_encoding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Encoding Options for Model — set_encoding","text":"list passed options needs following values: predictor_indicators describes whether create indicator/dummy variables factor predictors. three options: \"none\" (expand factor predictors), \"traditional\" (apply standard model.matrix() encodings), \"one_hot\" (create complete set including baseline level factors). compute_intercept controls whether model.matrix() include intercept formula. affects inclusion intercept column. intercept, model.matrix() computes dummy variables one factor level. Without intercept, model.matrix() computes full set indicators first factor variable, incomplete set remainder. remove_intercept removes intercept column model.matrix() finished. can useful model function (e.g. lm()) automatically generates intercept. allow_sparse_x specifies whether model can accommodate sparse representation predictors fitting tuning.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_encoding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Encoding Options for Model — set_encoding","text":"","code":"if (FALSE) { set_new_model(\"shallow_learning_model\") set_model_mode(\"shallow_learning_model\", \"partition\") set_model_engine(\"shallow_learning_model\", \"partition\", \"stats\")  set_encoding(   model = \"shallow_learning_model\",   mode = \"partition\",   eng = \"stats\",   options = list(     predictor_indicators = \"traditional\",     compute_intercept = TRUE,     remove_intercept = TRUE,     allow_sparse_x = FALSE   ) )  get_encoding(\"shallow_learning_model\") get_encoding(\"shallow_learning_model\")$value }"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Fit method for Model — set_fit","title":"Register Fit method for Model — set_fit","text":"function used register fit method model, engine, mode combination.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Fit method for Model — set_fit","text":"","code":"set_fit(model, mode, eng, value)  get_fit(model)"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register Fit method for Model — set_fit","text":"model single character string model type (e.g. \"k_means\", etc). mode single character string model mode (e.g. \"partition\"). eng single character string model engine. value list values, described Details.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Fit method for Model — set_fit","text":"list passed value needs following values: interface single character value “formula”, “data.frame”, “matrix”. defines type interface used underlying fit function (stats::lm, case). helps translation data appropriate format function. protect optional list function arguments changeable user. case, probably don’t want users pass data values arguments (fit() function called). func package name function called. using locally defined function, fun required. defaults optional list arguments fit function user can change, whose defaults can set . isn’t needed case, described later document.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Fit method for Model — set_fit","text":"","code":"if (FALSE) { set_new_model(\"shallow_learning_model\") set_model_mode(\"shallow_learning_model\", \"partition\") set_model_engine(\"shallow_learning_model\", \"partition\", \"stats\")  set_fit(   model = \"shallow_learning_model\",   mode = \"partition\",   eng = \"stats\",   value = list(     interface = \"formula\",     protect = c(\"formula\", \"data\"),     func = c(pkg = \"stats\", fun = \"lm\"),     defaults = list()   ) )  get_fit(\"shallow_learning_model\") get_fit(\"shallow_learning_model\")$value }"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Argument for Model — set_model_arg","title":"Register Argument for Model — set_model_arg","text":"function used register argument information model engine combination.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Argument for Model — set_model_arg","text":"","code":"set_model_arg(model, eng, exposed, original, func, has_submodel)  get_model_arg(model, eng)"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register Argument for Model — set_model_arg","text":"model single character string model type (e.g. \"k_means\", etc). eng single character string model engine. exposed single character string \"harmonized\" argument name modeling function exposes. original single character string argument name underlying model function uses. func named character vector describes call function. func elements pkg fun. former optional recommended latter required. example, c(pkg = \"stats\", fun = \"lm\") used invoke usual linear regression function. cases, helpful use c(fun = \"predict\") using package's predict method. has_submodel single logical whether argument can make predictions multiple submodels .","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_arg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Argument for Model — set_model_arg","text":"function needs called argument exposing.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_arg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Argument for Model — set_model_arg","text":"","code":"if (FALSE) { set_new_model(\"shallow_learning_model\") set_model_mode(\"shallow_learning_model\", \"partition\") set_model_engine(\"shallow_learning_model\", \"partition\", \"stats\")  set_model_arg(   model = \"shallow_learning_model\",   eng = \"stats\",   exposed = \"method\",   original = \"method\",   func = list(pkg = \"stats\", fun = \"lm\"),   has_submodel = FALSE )  get_model_arg(\"shallow_learning_model\", \"stats\") get_model_arg(\"shallow_learning_model\", \"stats\")$func }"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_engine.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Engine for Model — set_model_engine","title":"Register Engine for Model — set_model_engine","text":"function used register mode model mode combination.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_engine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Engine for Model — set_model_engine","text":"","code":"set_model_engine(model, mode, eng)"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_engine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register Engine for Model — set_model_engine","text":"model single character string model type (e.g. \"k_means\", etc). mode single character string model mode (e.g. \"partition\"). eng single character string model engine.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_engine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Engine for Model — set_model_engine","text":"function error called multiple times arguments. one unique model, mode, eng combination.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_engine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Engine for Model — set_model_engine","text":"","code":"if (FALSE) { set_new_model(\"shallow_learning_model\") set_model_mode(\"shallow_learning_model\", \"partition\")  get_from_env(\"shallow_learning_model\")  set_model_engine(\"shallow_learning_model\", \"partition\", \"stats\")  get_from_env(\"shallow_learning_model\") }"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Mode for Model — set_model_mode","title":"Register Mode for Model — set_model_mode","text":"function used register mode model.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Mode for Model — set_model_mode","text":"","code":"set_model_mode(model, mode)"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register Mode for Model — set_model_mode","text":"model single character string model type (e.g. \"k_means\", etc). mode single character string model mode (e.g. \"partition\").","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_mode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Mode for Model — set_model_mode","text":"function can called multiple times without error. becomes valuable multiple packages adds mode model. packages use set_model_mode() avoids one package depend .","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_model_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Mode for Model — set_model_mode","text":"","code":"if (FALSE) { set_new_model(\"shallow_learning_model\")  get_from_env(\"shallow_learning_model_modes\")  set_model_mode(\"shallow_learning_model\", \"partition\")  get_from_env(\"shallow_learning_model_modes\") }"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_new_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Register New Model — set_new_model","title":"Register New Model — set_new_model","text":"function used register new types models.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_new_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register New Model — set_new_model","text":"","code":"set_new_model(model)"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_new_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register New Model — set_new_model","text":"model single character string model type (e.g. \"k_means\", etc).","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_new_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register New Model — set_new_model","text":"function available users add models engines (package otherwise) can accessed using packages use modelenv.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_new_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register New Model — set_new_model","text":"","code":"if (FALSE) { set_new_model(\"shallow_learning_model\") }"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Prediction Method for Model — set_pred","title":"Register Prediction Method for Model — set_pred","text":"function used register prediction method information model, mode, engine combination.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Prediction Method for Model — set_pred","text":"","code":"set_pred(model, mode, eng, type, value)  get_pred_type(model, type)"},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register Prediction Method for Model — set_pred","text":"model single character string model type (e.g. \"k_means\", etc). mode single character string model mode (e.g. \"partition\"). eng single character string model engine. type single character value type prediction. Possible values : cluster raw. value list values, described Details.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_pred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register Prediction Method for Model — set_pred","text":"list passed value needs following values: pre post optional functions can preprocess data fed prediction code postprocess raw output predictions. won’t needed example, section examples can used model code easy use. data predicted simple type requirement, can avoid using pre function args . func prediction function (format ). many cases, packages predict method model’s class typically exported. case (example ), simple enough make generic call predict() associated package. args list arguments pass prediction function. likely wrapped rlang::expr() evaluated defining method. mda, code predict(object, newdata, type = \"class\"). actually given function model fit object, includes sub-object called fit() houses mda model object. data need matrix data frame, also use newdata = quote(.data.frame(newdata)) similar.","code":""},{"path":"https://emilhvitfeldt.github.io/modelenv/reference/set_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register Prediction Method for Model — set_pred","text":"","code":"if (FALSE) { set_new_model(\"shallow_learning_model\") set_model_mode(\"shallow_learning_model\", \"partition\") set_model_engine(\"shallow_learning_model\", \"partition\", \"stats\")  set_pred(   model = \"shallow_learning_model\",   eng = \"stats\",   mode = \"partition\",   type = \"cluster\",   value = list(     pre = NULL,     post = NULL,     func = c(fun = \"predict\"),     args =       list(         object = rlang::expr(object$fit),         newdata = rlang::expr(new_data),         type = \"response\"       )   ) )  get_pred_type(\"shallow_learning_model\", \"cluster\") get_pred_type(\"shallow_learning_model\", \"cluster\")$value }"}]
